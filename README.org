* Emacs Configuration
This file contains all of my emacs configuration in a literate style using org-babel.

In addition to this file the configuration are split into 2 more file:
1. =~/.emacs.d/early-init.el=
2. =~/.emacs.d/custom.el=: To avoid polluting my =~/.emacs.d/init.el= with autogenerated settings from Custom

** Package Setup
Initialize the package archive

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives
  '(("melpa" . "https://melpa.org/packages/")
    ("org" . "https://orgmode.org/elpa/")
    ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** Base Configuration
*** Custom
Have a dedicated file for the Custom settings
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

*** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "DejaVu Sans Mono-12"))
#+end_src

*** Transparency
#+begin_src emacs-lisp
  (set-frame-parameter nil 'alpha-background 97)

  (add-to-list 'default-frame-alist '(alpha-background . 97)) 
#+end_src

*** Miscellaneous Settings
Some random settings that I find helpful

**** Clutter-less Emacs UI
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq create-lockfiles nil)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode -1)
  (blink-cursor-mode 0)
  (display-battery-mode 1)
  (setq-default cursor-type 'bar)
  (setq ring-bell-function 'ignore)
#+end_src

**** Backups and saving
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
  (setq auto-save-default nil)
#+end_src

**** Highlighting and quick editing
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
  (subword-mode 1)
  (electric-indent-mode +1)
  (electric-pair-mode t)
  (delete-selection-mode 1)
#+end_src

**** Grep
Automatically switch to the grep buffer

#+begin_src emacs-lisp
  (add-hook 'grep-mode-hook
            #'(lambda ()
                (switch-to-buffer-other-window "*grep*")))
#+end_src

**** Splitting Windows
 Upon splitting a window I want to move to that buffer automatically
 
 #+begin_src emacs-lisp
   (defun split-window-and-switch-below ()
     (interactive)
     (split-window-below)
     (balance-windows)
     (other-window 1))

   (defun split-window-and-switch-right ()
     (interactive)
     (split-window-right)
     (balance-windows)
     (other-window 1))

   (global-set-key (kbd "C-x 2") 'split-window-and-switch-below)
   (global-set-key (kbd "C-x 3") 'split-window-and-switch-right)
 #+end_src

**** Tmux
Opening tmux sessions from emacs at point or at the current directory
It mainly utilizes projectile

#+begin_src emacs-lisp
  (defun tmux-session-exists? (session)
    (not (string-empty-p (shell-command-to-string (concat "tmux list-sessions 2>&1 | grep " session)))))

  (defun open-tmux-session-current-directory ()
    (interactive)
    (let* ((name (replace-regexp-in-string "\\." "" (projectile-project-name)))
           (attach-session? (tmux-session-exists? name)))
      (if attach-session?
          (start-process-shell-command "tmux" nil (concat "alacritty -e tmux attach -t " name))
        (start-process-shell-command "tmux" nil (concat "alacritty -e tmux new-session -s " name)))))

  (defun open-tmux-session-current-project-root ()
    (interactive)
    (let* ((name (replace-regexp-in-string "\\." "" (projectile-project-name)))
           (attach-session? (tmux-session-exists? name)))
      (if attach-session?
          (start-process-shell-command "tmux" nil (concat "alacritty -e tmux attach -t " name))
        (start-process-shell-command "tmux" nil (concat "alacritty -e tmux new-session -s " name " -c " (projectile-project-root))))))

  (global-set-key (kbd "C-c t v") 'open-tmux-session-current-directory)

  (global-set-key (kbd "C-c t b") 'open-tmux-session-current-project-root)
#+end_src

**** Global Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'global-display-line-numbers-mode)
  (global-set-key (kbd "C-c =") 'comment-region)
  (global-set-key (kbd "C-c -") 'uncomment-region)
  (global-set-key (kbd "C-c f") 'forward-sexp)
  (global-set-key (kbd "C-c b") 'backward-sexp)
#+end_src

*** Packages

**** UI
For themes, =doom-themes= is the way to go for me accompanied with =doom-modeline=

#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-city-lights t))

  (use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-battery t
        doom-modeline-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t))
#+end_src

Doom modelines uses =nerd-icons= so I need that tool

 #+begin_src emacs-lisp
    (use-package nerd-icons
      :ensure t)
 #+end_src

**** Sorting and filtering
#+begin_src emacs-lisp
  (use-package prescient
    :ensure t
    :config
    (prescient-persist-mode 1))
#+end_src

**** Navigation
=Ivy= and =counsel= paired with =ivy-prescient= for good fuzzy finding and sorting

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (ivy-mode 1)
    (setq projectile-completion-system 'ivy)
    (setq ivy-use-virtual-buffers t))

  (use-package counsel
    :ensure t
    :after ivy
    :bind ("C-x b" . counsel-switch-buffer)
    :init (counsel-mode 1))

  (use-package ivy-prescient
    :ensure t
    :after (ivy counsel)
    :init (ivy-prescient-mode 1))
#+end_src

Projectile, well it's projectile (the freaking best)

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :init (projectile-mode +1)) 
#+end_src

Ace jump mode, to jump around like a monkey hehehe

#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind
    ("<insert>" . ace-jump-mode)
    ("C-<insert>" . ace-jump-mode-pop-mark))
#+end_src

**** Treesitter
Behold the beauty of treesitter

#+begin_src emacs-lisp
  (use-package treesit
    :custom
    (treesit-font-lock-level 4)
    (treesit-extra-load-path `(,(concat (getenv "HOME") "/.emacs.d/dist/"))))
#+end_src

**** Editing
 =company= and =company-prescient= for code completion
 
 #+begin_src emacs-lisp
   (use-package company
     :ensure t
     :init (global-company-mode))

   (use-package company-prescient
     :ensure t
     :after company
     :init (company-prescient-mode 1))
 #+end_src

**** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))
#+end_src

**** Xclip
Copy to and paste from the GUI clipboard when running in terminal.

#+begin_src emacs-lisp
  (use-package xclip
    :ensure t
    :init (xclip-mode 1))
#+end_src


**** Eldoc
#+begin_src emacs-lisp
  (use-package eldoc
    :ensure t
    :hook
    (emacs-lisp-mode . turn-on-eldoc-mode)
    (lisp-interaction-mode . turn-on-eldoc-mode)
    (ielm-mode . turn-on-eldoc-mode))
#+end_src

**** Paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :init
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode)
    :config
    (show-paren-mode t))
#+end_src

**** Stumpwm
LONG LIVE THE ONE AND TRUE WINDOW MANAGER

#+begin_src emacs-lisp
  (use-package stumpwm-mode
    :ensure t)
#+end_src

**** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
  :ensure t
  :mode ("\\.yml\\'")
  :config
  (add-hook 'yaml-mode-hook
            #'(lambda ()
                (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src

**** Web
Mainly for html files

#+begin_src emacs-lisp
  (use-package tagedit				       
    :ensure t)

  (defun web-mode-init-hook ()			       
    "Hook for indentation in Web mode"		       
    (setq web-mode-markup-indent-offset 2)	       
    (setq web-mode-code-indent-offset 2)	       
    (setq web-mode-css-indent-offset 2))

  (use-package web-mode			       
    :ensure t					       
    :hook					       
    (web-mode . web-mode-init-hook)		       
    :mode ("\\.html?\\'")			       
    :config					       
    (setq web-mode-enable-current-column-highlight t  
          web-mode-enable-current-element-highlight t 
          web-mode-enable-auto-closing t	       
          web-mode-enable-auto-pairing t))	       
#+end_src

**** GURU Mode
#+begin_src emacs-lisp
  (use-package guru-mode
    :ensure t
    :config
    (guru-global-mode +1))
#+end_src


*** Typescript
Using emacs-29 built-in typescript modes

#+begin_src emacs-lisp
  (use-package add-node-modules-path		       
    :ensure t)					       

  (use-package prettier-js			       
    :ensure t)					       

  (defun prettier-js-hook ()			       
    (when (s-matches?				       
           (rx (or ".js" ".ts" ".jsx" ".tsx") eos)    
           (buffer-file-name))			       
      (add-node-modules-path)			       
      (prettier-js-mode)))			       

  (use-package typescript-ts-mode
    :ensure t
    :hook
    (typescript-ts-mode . prettier-js-hook)
    (tsx-ts-mode . prettier-js-hook)
    :mode (("\\.ts\\'" . typescript-ts-mode))
    :mode (("\\.tsx\\'" . tsx-ts-mode)))
#+end_src

*** Clojure
THE ONE AND TRUE PROGRAMMING LANGUAGE

=clojure-mode= paired with =cider=

#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t
    :after paredit
    :mode (("\\.edn$" . clojure-mode)
           ("\\.boot$" . clojure-mode)
           ("\\.cljs.*$" . clojurescript-mode)
           ("\\.cljc.*$" . clojurec-mode)
           ("lein-env" . enh-ruby-mode)
           ("\\.boot\\'" . clojure-mode))
    :hook
    (clojure-mode . enable-paredit-mode)
    :custom
    (cider-repl-display-help-banner nil))

  (use-package cider
    :ensure t
    :after (clojure-mode paredit eldoc)
    :hook
    (cider-mode . eldoc-mode)
    (cider-repl-mode . paredit-mode)
    (clojure-mode . cider-mode)
    (cider-repl-mode . paredit-mode)
    :config
    (setq cider-repl-pop-to-buffer-on-connect t
          cider-show-error-buffer t
          cider-auto-select-error-buffer t
          cider-repl-history-file "~/.emacs.d/cider-history"
          cider-repl-wrap-history t)
    (define-key cider-repl-mode-map (kbd "RET") #'cider-repl-newline-and-indent)
    (define-key cider-repl-mode-map (kbd "C-<return>") #'cider-repl-return))
#+end_src

*** Python
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))

  (use-package python-ts-mode
    :mode
    ("\\.py$" . python-ts-mode)
    :hook (python-ts-mode . elpy-mode))

#+end_src

***  LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp lsp-deferred
    :hook
    (clojure-mode . lsp-deferred)
    (clojurescript-mode . lsp-deferred)
    (clojurec-mode . lsp-deferred)
    (typescript-ts-mode . lsp-deferred)
    (tsx-ts-mode . lsp-deferred)
    :config
    (define-key lsp-mode-map (kbd "C-c w") lsp-command-map)

    (setq lsp-headerline-breadcrumb-enable nil
          lsp-enable-indentation nil
          lsp-use-plists t
          lsp-modeline-code-actions-enable nil
          lsp-modeline-diagnostics-enable nil
          lsp-modeline-diagnostics-mode nil
          lsp-completion-mode nil))

  (use-package lsp-ivy
    :ensure t)

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (set-face-attribute 'lsp-ui-sideline-global nil
                        :background "black")
    (setq lsp-ui-doc-enable nil)
    (define-key lsp-mode-map (kbd "C-c w s d") #'lsp-ui-doc-toggle)
    (define-key lsp-mode-map (kbd "C-c w s f") #'lsp-ui-doc-focus-frame)
    :custom
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-doc-position 'top))

  (use-package flycheck
    :ensure t)
#+end_src

*** Org
#+begin_src emacs-lisp
  (defun org-mode-init-hook ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :ensure t
    :bind
    ("C-c a" . org-agenda)
    :hook
    (org-mode . org-mode-init-hook)
    (org-agenda-mode . org-mode-init-hook)
    :config  
    (setq org-todo-keywords '((type "TODO(t)" "PROJ(p)" "|" "DONE(d)")))
    (setq org-todo-keyword-faces
          '(("PROJ" :foreground "#32cd32" :weight bold)
            ("TODO" :foreground "#adff2f" :weight bold)))
    (setq org-agenda-files '("~/Dropbox/org/work.org"
                             "~/Dropbox/org/personal.org"
                             "~/Dropbox/org/calendar.org"))
    (setq org-agenda-timegrid-use-ampm t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done t)
    (setq org-log-into-drawer t)
    (setq org-ellipsis " ▼")

    (require 'org-indent)

    ;; Fonts
    (set-face-attribute 'org-document-title nil :font "DejaVu Sans Mono-12" :weight 'bold :height 1.1)
    (set-face-attribute 'org-document-info nil :font "DejaVu Sans Mono-12" :weight 'bold :height 1.1)
    (set-face-attribute 'org-document-info-keyword nil :font "DejaVu Sans Mono-12" :weight 'bold :height 1.1)
    (dolist (face '((org-level-1 . 1.4)
                    (org-level-2 . 1.3)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.2)
                    (org-level-6 . 1.2)
                    (org-level-7 . 1.2)
                    (org-level-8 . 1.2)))
      (set-face-attribute (car face) nil :font "DejaVu Sans Mono-12" :weight 'medium :height (cdr face)))
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil))
#+end_src

=org-bullets= for nicer bullet points

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

=org-gcal= to sync the agenda with google calendar

#+begin_src emacs-lisp
  (use-package org-gcal
    :ensure t
    :after org
    :init
    (setq org-gcal-client-id (getenv "EMACS_GOOGLE_CALENDER_CLIENT_ID")
          org-gcal-client-secret (getenv "EMACS_GOOGLE_CALENDER_SECRET_ID")
          org-gcal-fetch-file-alist `((,(getenv "EMACS_GOOGLE_CALENDAR_EMAIL_1") .  "~/Dropbox/org/calendar.org")))
    (setq plstore-cache-passphrase-for-symmetric-encryption t))
#+end_src

**** Custom org flow
#+begin_src emacs-lisp
  (defconst available-targets '("work" "personal"))

  (defun mtaan/current-day-heading ()
    (apply 'format "Date: %s/%s/%s" (calendar-current-date)))

  (defun mtaan/get-next-seven-days ()
    (cl-loop for i from 1 to 7
             collect (apply 'format "Date: %s/%s/%s" (calendar-current-date i))))

  (defun mtaan/org-add-new-day (target day)
    (when (or (string-empty-p target)
              (not (member target available-targets)))
      (error "Target is not valid"))
    (find-file (concat "~/Dropbox/org/" target ".org"))
    (let* ((heading-exists? (org-find-exact-headline-in-buffer day)))
      (if heading-exists?
          (message "This day is already logged")
        (progn
          (goto-char (point-min))
          (org-insert-heading-respect-content)
          (insert day)))))

  (defun mtaan/org-add-new-project-with-day (proj day)
    "By default this will use the work file, maybe later it could be generalized.
     It will also assume that I'm adding a proj under the same day"
    (when (string-empty-p proj)
      (error "Project name shouldn't be empty"))
    (find-file "~/Dropbox/org/work.org")
    (let* ((proj-subheading (concat "PROJ " (capitalize proj)))
           (heading (org-find-exact-headline-in-buffer day nil 't)))
      (unless heading
        (error "This day is not logged"))
      (goto-char heading)
      (end-of-line)
      (org-insert-subheading nil)
      (insert proj-subheading)
      (org-set-property "ID" (concat day " - " proj-subheading))))

  (defun mtaan/org-add-new-todo-under-proj-with-day (proj day)
    (when (string-empty-p proj)
      (error "Project name shouldn't be empty"))
    (find-file "~/Dropbox/org/work.org")
    (let* ((proj-subheading (concat "PROJ " (capitalize proj)))
           (heading (org-find-exact-headline-in-buffer day nil 't)))
      (unless heading
        (error "Current day is not logged"))
      (org-id-goto (concat day " - " proj-subheading))
      (end-of-line)
      (org-insert-heading-respect-content)
      (org-demote)
      (insert "TODO ")))

  (defun mtaan/org-add-new-day-other-day (target day)
    (interactive (list
                  (completing-read "Available targets: " available-targets)
                  (completing-read "Available Days: " (mtaan/get-next-seven-days))))
    (mtaan/org-add-new-day target day))

  (defun mtaan/org-add-new-project-other-day (proj day)
    (interactive (list
                  (read-string "Project Name: ")
                  (completing-read "Available days: "
                                   (mtaan/get-next-seven-days))))
    (mtaan/org-add-new-project-with-day proj day))

  (defun mtaan/org-add-new-todo-under-proj-other-day (proj day)
    (interactive (list
                  (read-string "Project Name: ")
                  (completing-read "Available days: "
                                   (mtaan/get-next-seven-days))))
    (mtaan/org-add-new-todo-under-proj-with-day proj day))

  (defun mtaan/org-add-current-day (target)
    (interactive (list (completing-read "Available targets: " available-targets)))
    (mtaan/org-add-new-day target (mtaan/current-day-heading)))

  (defun mtaan/org-add-new-project-today (proj)
    (interactive "sProject Name: ")
    (mtaan/org-add-new-project-with-day proj (mtaan/current-day-heading)))

  (defun mtaan/org-add-new-todo-under-proj-today (proj)
    (interactive "sProject Name: ")
    (mtaan/org-add-new-todo-under-proj-with-day proj (mtaan/current-day-heading)))
#+end_src
